{"version":3,"sources":["webpack:///./src/index.js"],"names":["query","IS_MOBILE","document","querySelector","offsetWidth","IS_DESKTOP","rentStrikeSheetURI","cartoSheetSyncTable","cartoCountiesURI","cartoStatesURI","createStatesCartoURI","cartoCitiesURI","createCitiesCartoURI","cartoNationsURI","createNationsCartoURI","fillColorScale","undefined","strokeColorScale","policyStrengthLanguage","initialMapZoom","mapConfig","lat","lng","z","nations","states","cities","counties","rentStrikes","hash","input","slice","split","inputVals","i","length","key","value","isNaN","parseInt","parseFloat","rentstrike","inputValues","location","resizeWindow","map","L","zoomControl","attributionControl","maxBounds","setView","titleDetails","getElementById","handleWindowResize","invalidateSize","addEventListener","open","classList","remove","add","window","closeInfo","closePopup","on","e","removeAttribute","setAttribute","popup","_latlng","getZoom","animate","innerHTML","setTimeout","clearTimeout","control","attribution","prefix","addAttribution","addTo","zoom","position","layersControl","layers","collapsed","popupTemplate","infowindowTemplate","nationInfowindowTemplate","rentStrikePopupTemplate","rentStrikeInfowindowTemplate","tileLayer","minZoom","maxZoom","Promise","all","fetch","then","res","ok","Error","text","json","rentStrikeSheetsText","statesGeoJson","countiesGeoJson","nationsGeoJson","citiesGeoJson","rentStrikeGeoJson","type","features","d3","csvParse","autoType","filter","Strike_Status","Latitude","Longitude","status","index","id","properties","geometry","coordinates","geojson","layerOptions","style","feature","color","range","fillColor","fillOpacity","weight","nationsLayer","geoJson","bindPopup","layer","name_en","props","jurisdictionName","jurisdictionType","popupName","policyStrength","renderedInfo","Mustache","render","addLayer","statesLayer","name","admin","handleStatesLayer","countiesLayer","county","state","handleCountiesLayer","citiesLayer","pointToLayer","latlng","circleMarker","radius","municipality","Country","handleCitiesLayer","rentStrikeIcon","Icon","iconUrl","iconSize","iconAnchor","className","rentStrikeLayer","marker","icon","rentStrikeLayerMarkers","markerClusterGroup","maxClusterRadius","addOverlay","forEach","layerGroup","hasLayer","bringToBack","removeLayer","catch","error","console","log"],"mappings":"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","file":"index.15b72e8ee56f7101948c.js","sourcesContent":["// this tells webpack to use our CSS\nimport \"styles/index.scss\";\n\n/******************************************\n * GLOBAL CONSTANTS & FLAGS\n *****************************************/\n// note: this matches the breakpoint in styles.css\nconst MOBILE_BREAKPOINT = 640;\nlet IS_MOBILE = document.querySelector(\"body\").offsetWidth < MOBILE_BREAKPOINT;\n\nconst DESKTOP_BREAKPOINT = 1200;\nlet IS_DESKTOP =\n  document.querySelector(\"body\").offsetWidth > DESKTOP_BREAKPOINT;\n\n/******************************************\n * DATA SOURCES\n *****************************************/\n// unique id of the Google sheet that imports desired columns from the rent-strike form responses public sheet\nconst renStikeSheetId = \"1rCZfNXO3gbl5H3cKhGXKIv3samJ1KC4nLhCwwZqrHvU\";\n\n// the URI that grabs the sheet text formatted as a CSV\nconst rentStrikeSheetURI = `https://docs.google.com/spreadsheets/d/${renStikeSheetId}/export?format=csv&id=${renStikeSheetId}`;\n\n// table in CARTO that syncs with the Google sheet data\nconst cartoSheetSyncTable = \"public.emergency_tenant_protections_scored\";\n\n// the URIs for CARTO counties &s tates layers\n// joined to the moratoriums data\n// (all in AEMP CARTO acct)\nconst cartoCountiesURI = createCountiesCartoURI();\nconst cartoStatesURI = createStatesCartoURI();\nconst cartoCitiesURI = createCitiesCartoURI();\nconst cartoNationsURI = createNationsCartoURI();\n\n// colorScale comes from this ColorBrewer url:\n// https://colorbrewer2.org/#type=sequential&scheme=YlGn&n=7\nconst colorNoData = \"#939393\";\nconst fillColorScale = [undefined, \"#d9f0a3\", \"#78c679\", \"#238443\"];\nconst strokeColorScale = [undefined, \"#addd8e\", \"#41ab5d\", \"#005a32\"];\n\nconst policyStrengthLanguage = [\n  \"\",\n  \"Few protections in place\",\n  \"Some protections in place\",\n  \"Many protections in place\",\n];\n\n/******************************************\n * MAP SETUP & MAP CONTROLS\n *****************************************/\n\n// options for configuring the Leaflet map\n// don't add the default zoom ui and attribution as they're customized first then added layer\nconst mapOptions = {\n  zoomControl: false,\n  attributionControl: false,\n  maxBounds: [\n    [-85.05, -190], // lower left\n    [85.05, 200], // upper right\n  ],\n};\n\n// global map layer styling variables\nconst strokeWeight = 1.5;\nconst pointRadius = 8;\nconst fillOpacity = 0.7;\n\n// setting the initial zoom settings\nlet initialMapZoom = 4;\nif (IS_MOBILE) {\n  initialMapZoom = 3;\n} else if (IS_DESKTOP) {\n  initialMapZoom = 5;\n}\n\n// initial values, if not given by the url\nlet mapConfig = {\n  lat: 40.67,\n  lng: -97.23,\n  z: initialMapZoom,\n  nations: false,\n  states: true,\n  cities: true,\n  counties: true,\n  rentStrikes: true,\n};\n\n// read url hash input & maybe override mapConfig props\ninputValues(location.hash);\n\n// check the url hash for params then\n// override map default settings if any are present\n// assumes params are as follows:\n// #lat=<float>&lng=<float>&z=<integer>&states=<boolean>&cities=<boolean>&counties=<boolean>&rentstrike=<boolean>\nfunction inputValues(hash) {\n  let input = hash.slice(1).split(\"&\");\n  let inputVals = {};\n  let i = 0;\n  for (i; i < input.length; i++) {\n    let [key, value] = input[i].split(\"=\");\n    inputVals[key] = value;\n  }\n\n  // override the default map config values, if they exist\n  if (!isNaN(inputVals.z)) {\n    mapConfig.z = parseInt(inputVals.z);\n  }\n\n  if (!isNaN(inputVals.lat)) {\n    mapConfig.lat = parseFloat(inputVals.lat);\n  }\n\n  if (!isNaN(inputVals.lng)) {\n    mapConfig.lng = parseFloat(inputVals.lng);\n  }\n\n  if (inputVals.cities !== undefined) {\n    if (inputVals.cities === \"true\") {\n      mapConfig.cities = true;\n    } else if (inputVals.cities === \"false\") {\n      mapConfig.cities = false;\n    }\n  }\n\n  if (inputVals.counties !== undefined) {\n    if (inputVals.counties === \"true\") {\n      mapConfig.counties = true;\n    } else if (inputVals.counties === \"false\") {\n      mapConfig.counties = false;\n    }\n  }\n\n  if (inputVals.states !== undefined) {\n    if (inputVals.states === \"true\") {\n      mapConfig.states = true;\n    } else if (inputVals.states === \"false\") {\n      mapConfig.states = false;\n    }\n  }\n\n  if (inputVals.nations !== undefined) {\n    if (inputVals.nations === \"true\") {\n      mapConfig.nations = true;\n    } else if (inputVals.nations === \"false\") {\n      mapConfig.nations = false;\n    }\n  }\n\n  if (inputVals.rentstrike !== undefined) {\n    if (inputVals.rentstrike === \"true\") {\n      mapConfig.rentStrikes = true;\n    } else if (inputVals.rentstrike === \"false\") {\n      mapConfig.rentStrikes = false;\n    }\n  }\n}\n\n// create a new map instance by referencing the appropriate html element by its \"id\" attribute\nconst map = L.map(\"map\", mapOptions).setView(\n  [mapConfig.lat, mapConfig.lng],\n  mapConfig.z\n);\n\n// the collapsable <details> element below the map title\nconst titleDetails = document\n  .getElementById(\"aemp-titlebox\")\n  .querySelector(\"details\");\n\ntitleDetails.addEventListener(\"toggle\", () => {\n  if (titleDetails.open) {\n    document.getElementById(\"aemp-titlebox\").classList.remove(\"collapsed\");\n  } else {\n    document.getElementById(\"aemp-titlebox\").classList.add(\"collapsed\");\n  }\n});\n\nfunction checkIsMobile() {\n  IS_MOBILE = document.querySelector(\"body\").offsetWidth < MOBILE_BREAKPOINT;\n}\n\nfunction toggleTitleDetails() {\n  if (titleDetails.open) {\n    titleDetails.removeAttribute(\"open\");\n  } else {\n    titleDetails.setAttribute(\"open\", true);\n  }\n}\n\n// used by infowindow-template\nwindow.closeInfo = closeInfo;\nfunction closeInfo() {\n  map.closePopup();\n  map.invalidateSize();\n}\n\nmap.on(\"popupopen\", function (e) {\n  document.getElementById(\"root\").classList.add(\"aemp-popupopen\");\n\n  if (IS_MOBILE) {\n    titleDetails.open && toggleTitleDetails();\n    map.invalidateSize();\n  }\n\n  map.setView(e.popup._latlng, map.getZoom(), { animate: true });\n});\n\nmap.on(\"popupclose\", function () {\n  document.getElementById(\"root\").classList.remove(\"aemp-popupopen\");\n  document.getElementById(\"aemp-infowindow-container\").innerHTML = \"\";\n  if (IS_MOBILE)\n    setTimeout(function () {\n      map.invalidateSize();\n    }, 100);\n});\n\nmap.on(\"click\", function () {\n  if (IS_MOBILE) {\n    titleDetails.open = false;\n  }\n});\n\nlet resizeWindow;\nwindow.addEventListener(\"resize\", function () {\n  clearTimeout(resizeWindow);\n  resizeWindow = setTimeout(handleWindowResize, 250);\n});\n\nfunction handleWindowResize() {\n  checkIsMobile();\n  map.invalidateSize();\n}\n\nL.control\n  .attribution({ prefix: \"Data sources by: \" })\n  .addAttribution(\n    \"<a href='https://www.antievictionmap.com/' target='_blank'>Anti-Eviction Mapping Project</a>\"\n  )\n  .addAttribution(\n    \"<a href='https://www.openstreetmap.org' target='_blank'>Open Street Map Contributors</a>\"\n  )\n  .addTo(map);\n\nL.control.zoom({ position: \"bottomright\" }).addTo(map);\n\n// Map layers control: add the layers later after their data has been fetched\nconst layersControl = L.control\n  .layers(null, null, { position: \"topright\", collapsed: false })\n  .addTo(map);\n\n// Get the popup & infowindow templates from the HTML.\n// We can do this here because the template will never change.\nconst popupTemplate = document.querySelector(\".popup-template\").innerHTML;\nconst infowindowTemplate = document.getElementById(\"aemp-infowindow-template\")\n  .innerHTML;\nconst nationInfowindowTemplate = document.getElementById(\n  \"aemp-infowindow-template\"\n).innerHTML;\n\nconst rentStrikePopupTemplate = document.querySelector(\n  \".rentstrike-popup-template\"\n).innerHTML;\nconst rentStrikeInfowindowTemplate = document.getElementById(\n  \"aemp-rentstrike-infowindow-template\"\n).innerHTML;\n// Add base layer\nL.tileLayer(\n  \"https://a.basemaps.cartocdn.com/rastertiles/light_all/{z}/{x}/{y}@2x.png\",\n  {\n    minZoom: 1,\n    maxZoom: 18,\n  }\n).addTo(map);\n\n/******************************************\n * URI HELPERS\n *****************************************/\n\nfunction createCitiesCartoURI() {\n  const query = `SELECT\n  municipality, range, policy_type, policy_summary, link, the_geom\n  FROM ${cartoSheetSyncTable} \n  WHERE the_geom is not null and admin_scale = 'City'\n  ORDER BY range`;\n\n  return `https://ampitup.carto.com/api/v2/sql?q=${query}&format=geojson`;\n}\n\nfunction createCountiesCartoURI() {\n  const query = `SELECT\n  c.the_geom, c.county, c.state, m.range, m.policy_type, m.policy_summary, m.link, m.range\n  FROM us_county_boundaries c\n  JOIN ${cartoSheetSyncTable} m\n  ON ST_Intersects(c.the_geom, m.the_geom)\n  WHERE m.the_geom IS NOT NULL\n  AND m.admin_scale = 'County'\n  OR m.admin_scale = 'City and County'\n  ORDER BY m.range`;\n\n  return `https://ampitup.carto.com/api/v2/sql?q=${query}&format=geojson`;\n}\n\nfunction createStatesCartoURI() {\n  const query = `SELECT\n  s.the_geom, s.name, s.admin, s.sr_adm0_a3, m.range, m.iso, m.policy_type, m.policy_summary, m.link\n  FROM public.states_and_provinces_global s\n  INNER JOIN ${cartoSheetSyncTable} m\n  ON s.name = m.state\n  AND s.sr_adm0_a3 = m.iso\n  AND m.admin_scale = 'State'\n  ORDER BY m.range`;\n\n  return `https://ampitup.carto.com/api/v2/sql?q=${query}&format=geojson`;\n}\n\nfunction createNationsCartoURI() {\n  const query = `SELECT c.the_geom, c.adm0_a3, c.name_en, m.range,\n  m.policy_type, m.policy_summary, m.link\n  FROM countries c\n  INNER JOIN ${cartoSheetSyncTable} m\n  ON c.adm0_a3 = m.iso\n  AND m.admin_scale = 'Country'\n  ORDER BY m.range`;\n\n  return `https://ampitup.carto.com/api/v2/sql?q=${query}&format=geojson`;\n}\n\n/******************************************\n * FETCH DATA SOURCES\n *****************************************/\n\nPromise.all([\n  fetch(rentStrikeSheetURI).then((res) => {\n    if (!res.ok) throw Error(\"Unable to fetch rent strike sheet data\");\n    return res.text();\n  }),\n  fetch(cartoStatesURI).then((res) => {\n    if (!res.ok) throw Error(\"Unable to fetch states geojson\");\n    return res.json();\n  }),\n  fetch(cartoCountiesURI).then((res) => {\n    if (!res.ok) throw Error(\"Unable to fetch counties geojson\");\n    return res.json();\n  }),\n  fetch(cartoNationsURI).then((res) => {\n    if (!res.ok) throw Error(\"Unable to fetch nations geojson\");\n    return res.json();\n  }),\n  fetch(cartoCitiesURI).then((res) => {\n    if (!res.ok) throw Error(\"Unable to fetch cities geojson\");\n    return res.json();\n  }),\n])\n  .then(handleData)\n  .catch((error) => console.log(error));\n\n/******************************************\n * HANDLE DATA ASYNC RESPONSES\n *****************************************/\n\nfunction handleData([\n  rentStrikeSheetsText,\n  statesGeoJson,\n  countiesGeoJson,\n  nationsGeoJson,\n  citiesGeoJson,\n]) {\n  const rentStrikeRows = d3\n    .csvParse(rentStrikeSheetsText, d3.autoType)\n    .filter(\n      ({ Strike_Status, Latitude, Longitude }) =>\n        Strike_Status !== null && Longitude !== null && Latitude !== null\n    )\n    .map(({ Strike_Status, ...rest }) => ({\n      status:\n        Strike_Status === \"Yes / Sí / 是 / Oui\" || Strike_Status === \"Yes\"\n          ? \"Yes\"\n          : \"Unsure\",\n\n      ...rest,\n    }));\n\n  const rentStrikeGeoJson = {\n    type: \"FeatureCollection\",\n    features: rentStrikeRows.map(({ Longitude, Latitude, ...rest }, index) => ({\n      type: \"Feature\",\n      id: index,\n      properties: rest,\n      geometry: {\n        type: \"Point\",\n        coordinates: [Longitude, Latitude],\n      },\n    })),\n  };\n\n  // add the states, cities, counties, and rentstrikes layers to the map\n  // and save the layers output\n  const nations = handleNationsLayer(nationsGeoJson);\n  const states = handleStatesLayer(statesGeoJson);\n  const counties = handleCountiesLayer(countiesGeoJson);\n  const cities = handleCitiesLayer(citiesGeoJson);\n  const rentStrikes = handleRentStrikeLayer(rentStrikeGeoJson);\n\n  // add layers to map layers control UI\n  layersControl\n    .addOverlay(rentStrikes, \"Rent Strikes\")\n    .addOverlay(cities, \"Cities\")\n    .addOverlay(counties, \"Counties\")\n    .addOverlay(states, \"States\")\n    .addOverlay(nations, \"Nations\");\n\n  // Apply correct relative order of layers when adding from control.\n  map.on(\"overlayadd\", function () {\n    // Top of list is top layer\n    fixZOrder([cities, counties, states, nations]);\n  });\n\n  // if any layers in the map config are set to false,\n  // remove them from the map\n  if (!mapConfig.nations) {\n    map.removeLayer(nations);\n  }\n\n  if (!mapConfig.states) {\n    map.removeLayer(states);\n  }\n\n  if (!mapConfig.counties) {\n    map.removeLayer(counties);\n  }\n\n  if (!mapConfig.cities) {\n    map.removeLayer(cities);\n  }\n\n  if (!mapConfig.rentStrikes) {\n    map.removeLayer(rentStrikes);\n  }\n}\n\n/******************************************\n * HANDLE ADDING MAP LAYERS\n *****************************************/\n\n// Ensures that map overlay pane layers are displayed in the correct Z-Order\nfunction fixZOrder(dataLayers) {\n  dataLayers.forEach(function (layerGroup) {\n    if (map.hasLayer(layerGroup)) {\n      layerGroup.bringToBack();\n    }\n  });\n}\n\nfunction handleCitiesLayer(geojson) {\n  // styling for the cities layer: style cities conditionally according to moratorium rating scale 1 to 3\n  const pointToLayer = (feature, latlng) => {\n    return L.circleMarker(latlng, {\n      color: strokeColorScale[feature.properties.range] || colorNoData,\n      fillColor: fillColorScale[feature.properties.range] || colorNoData,\n      fillOpacity: fillOpacity,\n      radius: pointRadius,\n      weight: strokeWeight,\n    });\n  };\n\n  // Create the Leaflet layer for the cities data\n  const citiesLayer = L.geoJson(geojson, {\n    pointToLayer: pointToLayer,\n  });\n\n  // Add popups to the layer\n  citiesLayer.bindPopup(function (layer) {\n    // This function is called whenever a feature on the layer is clicked\n\n    // Render the template with all of the properties. Mustache ignores properties\n    // that aren't used in the template, so this is fine.\n    const { municipality, state, Country } = layer.feature.properties;\n    const props = {\n      ...layer.feature.properties,\n      // Build city name with state and country if supplied\n      jurisdictionName: `${municipality}${state ? `, ${state}` : \"\"}${\n        Country ? `, ${Country}` : \"\"\n      }`,\n      jurisdictionType: \"City\",\n      popupName: municipality,\n      policyStrength: policyStrengthLanguage[layer.feature.properties.range],\n    };\n\n    const renderedInfo = Mustache.render(infowindowTemplate, props);\n    document.getElementById(\n      \"aemp-infowindow-container\"\n    ).innerHTML = renderedInfo;\n    // Override jurisdiction name for popup\n    return Mustache.render(popupTemplate, props);\n  });\n\n  // Add data to the map\n  citiesLayer.addTo(map);\n\n  return citiesLayer;\n}\n\nfunction handleCountiesLayer(geojson) {\n  const layerOptions = {\n    style: (feature) => {\n      // style counties based on strength of protections\n      return {\n        color: strokeColorScale[feature.properties.range] || colorNoData,\n        fillColor: fillColorScale[feature.properties.range] || colorNoData,\n        fillOpacity: fillOpacity,\n        weight: strokeWeight,\n      };\n    },\n  };\n\n  // Create the Leaflet layer for the counties data\n  const countiesLayer = L.geoJson(geojson, layerOptions);\n\n  countiesLayer.bindPopup(function (layer) {\n    const { county, state } = layer.feature.properties;\n    const props = {\n      ...layer.feature.properties,\n      // Show county with state if state field is set\n      jurisdictionName: `${county}${state ? `, ${state}` : \"\"}`,\n      jurisdictionType: \"County\",\n      popupName: `${county}${state ? `, ${state}` : \"\"}`,\n      policyStrength: policyStrengthLanguage[layer.feature.properties.range],\n    };\n    const renderedInfo = Mustache.render(infowindowTemplate, props);\n    document.getElementById(\n      \"aemp-infowindow-container\"\n    ).innerHTML = renderedInfo;\n    return Mustache.render(popupTemplate, props);\n  });\n\n  countiesLayer.addTo(map);\n  return countiesLayer;\n}\n\nfunction handleStatesLayer(geojson) {\n  // styling for the states layer: style states conditionally according to moratorium rating scale 1 to 3\n  const layerOptions = {\n    style: (feature) => {\n      return {\n        color: strokeColorScale[feature.properties.range] || colorNoData,\n        fillColor: fillColorScale[feature.properties.range] || colorNoData,\n        fillOpacity: fillOpacity,\n        weight: strokeWeight,\n      };\n    },\n  };\n\n  // Create the Leaflet layer for the states data\n  const statesLayer = L.geoJson(geojson, layerOptions);\n\n  statesLayer.bindPopup(function (layer) {\n    const { name, admin } = layer.feature.properties;\n    const props = {\n      ...layer.feature.properties,\n      jurisdictionName: `${name}${admin ? `, ${admin}` : \"\"}`,\n      jurisdictionType: \"State/Province\",\n      popupName: name,\n      policyStrength: policyStrengthLanguage[layer.feature.properties.range],\n    };\n    const renderedInfo = Mustache.render(infowindowTemplate, props);\n    document.getElementById(\n      \"aemp-infowindow-container\"\n    ).innerHTML = renderedInfo;\n    // Overwrite jurisdiction name to remove country\n    return Mustache.render(popupTemplate, props);\n  });\n\n  statesLayer.addTo(map);\n\n  return statesLayer;\n}\n\nfunction handleRentStrikeLayer(geoJson) {\n  const rentStrikeIcon = new L.Icon({\n    iconUrl: \"./assets/mapIcons/rent-strike.svg\",\n    iconSize: [40, 40],\n    iconAnchor: [20, 20],\n    className: \"icon-rent-strike\",\n  });\n\n  // add custom marker icons\n  const rentStrikeLayer = L.geoJson(geoJson, {\n    pointToLayer: function (feature, latlng) {\n      return L.marker(latlng, {\n        icon: rentStrikeIcon,\n      });\n    },\n  });\n\n  //add markers to cluster with options\n  const rentStrikeLayerMarkers = L.markerClusterGroup({\n    maxClusterRadius: 40,\n  }).on(\"clusterclick\", function () {\n    if (IS_MOBILE) {\n      titleDetails.open = false;\n    }\n  });\n\n  rentStrikeLayerMarkers.addLayer(rentStrikeLayer).bindPopup(function (layer) {\n    const renderedInfo = Mustache.render(\n      rentStrikeInfowindowTemplate,\n      layer.feature.properties\n    );\n    document.getElementById(\n      \"aemp-infowindow-container\"\n    ).innerHTML = renderedInfo;\n    return Mustache.render(rentStrikePopupTemplate, layer.feature.properties);\n  });\n\n  map.addLayer(rentStrikeLayerMarkers);\n\n  return rentStrikeLayerMarkers;\n}\n\nfunction handleNationsLayer(geojson) {\n  const layerOptions = {\n    style: (feature) => {\n      return {\n        color: strokeColorScale[feature.properties.range] || colorNoData,\n        fillColor: fillColorScale[feature.properties.range] || colorNoData,\n        fillOpacity: fillOpacity,\n        weight: strokeWeight,\n      };\n    },\n  };\n\n  // Create the Leaflet layer for the nations data\n  const nationsLayer = L.geoJson(geojson, layerOptions);\n\n  nationsLayer.bindPopup(function (layer) {\n    const { name_en } = layer.feature.properties;\n    const props = {\n      ...layer.feature.properties,\n      jurisdictionName: name_en,\n      jurisdictionType: \"Country\",\n      popupName: name_en,\n      policyStrength: policyStrengthLanguage[layer.feature.properties.range],\n    };\n    const renderedInfo = Mustache.render(nationInfowindowTemplate, props);\n    document.getElementById(\n      \"aemp-infowindow-container\"\n    ).innerHTML = renderedInfo;\n    return Mustache.render(popupTemplate, props);\n  });\n\n  map.addLayer(nationsLayer);\n\n  return nationsLayer;\n}\n"],"sourceRoot":""}